# nginx-proxy version : 1.0.4-8-g2f89856
# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}
map $http_x_forwarded_host $proxy_x_forwarded_host {
  default $http_x_forwarded_host;
  ''      $http_host;
}
# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}
# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}
# Apply fix for very long server names
server_names_hash_bucket_size 128;
# Default dhparam
ssl_dhparam /etc/nginx/dhparam/dhparam.pem;
# Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
  default off;
  https on;
}
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent" '
                 '"$upstream_addr"';
access_log off;
		ssl_protocols TLSv1.2 TLSv1.3;
		ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
		ssl_prefer_server_ciphers off;
error_log /dev/stderr;
resolver 127.0.0.11;
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
proxy_set_header X-Original-URI $request_uri;
# Mitigate httpoxy attack (see README for details)
proxy_set_header Proxy "";
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	server_tokens off;
	listen 80;
	access_log /var/log/nginx/access.log vhost;
	return 503;
}
server {
	server_name _; # This is just an invalid value which will never trigger on a real hostname.
	server_tokens off;
	listen 443 ssl http2;
	access_log /var/log/nginx/access.log vhost;
	return 503;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

# Connect Heimdall with Proxy (webproxy) Docker Network
########################################################################################################################
# Heimdall                                                                                                             #
########################################################################################################################
upstream heimdall.arpa {
  server 192.168.1.60;
}

server {
  server_name heimdall.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://heimdall.arpa;
  }
}

server {
  server_name heimdall.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

########################################################################################################################
# Dnsmasq                                                                                                             #
########################################################################################################################
upstream dnsmasq.arpa {
  server 192.168.1.60:8090;
}

server {
  server_name dnsmasq.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://192.168.1.60:8090;
  }
}

server {
  server_name dnsmasq.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

########################################################################################################################
# Yacht                                                                                                             #
########################################################################################################################
upstream yacht.arpa {
  server 192.168.1.60:8000;
}

server {
  server_name yacht.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://192.168.1.60:8000;
  }
}

server {
  server_name yacht.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

########################################################################################################################
# Jellyfin                                                                                                             #
########################################################################################################################
upstream jellyfin.arpa {
  server 192.168.1.60:8096;
}

server {
  server_name jellyfin.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://192.168.1.60:8096;
  }
}

server {
  server_name jellyfin.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

########################################################################################################################
# Transmission                                                                                                             #
########################################################################################################################
upstream transmission.arpa {
  server 192.168.1.60:9091;
}

server {
  server_name transmission.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://192.168.1.60:9091;
  }
}

server {
  server_name transmission.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}

########################################################################################################################
# Portainer                                                                                                             #
########################################################################################################################
upstream portainer.arpa {
  server 192.168.1.60:8099;
}

server {
  server_name portainer.arpa;
  listen 80;
  acceess_log /var/log/nginx/access.log vhost;
  location / {
    proxy_pass http://192.168.1.60:8099;
  }
}

server {
  server_name portainer.arpa;
  listen 443 ssl http2;
  acceess_log /var/log/nginx/access.log vhost;
  return 500;
	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}