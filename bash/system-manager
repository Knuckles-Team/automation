#!/bin/bash

function usage(){
  echo -e "\nUsage: "
  echo -e "system-manager -h [Help]"
  echo -e "system-manager --help [Help]"
  echo -e "system-manager -p [Install and configure all available applications]"
  echo -e "system-manager --provision [Install and configure all available applications]"
  echo -e "system-manager provision [Install and configure all available applications]"
  echo -e "system-manager -u [Update and upgrade computer]"
  echo -e "system-manager --update [Update and upgrade computer]"
  echo -e "system-manager -u -l [Update and upgrade computer and save results to log file]"
  echo -e "system-manager --update --log /home/${computer_user}/Desktop [Update and upgrade computer and save results to /home/${computer_user}/Desktop/provision_log_${date}.log]"
  echo -e "system-manager -u -p -a tmux,git,openssh [Update, Upgrade, then Install and configure applications]"
  echo -e "system-manager --update --provision --applications vlc,fstab,ffmpeg [Update, Upgrade, then Install and configure applications]"
  echo -e "system-manager -p -i -c -a tmux,git,openssh [Install only flag will only install, not configure applications]"
  echo -e "system-manager provision --install-only tmux,git,openssh [Install only flag will only install, not configure applications]"
  echo -e "\nFlags: "
  echo -e "-a | --applications                 [Specify specific applications to install]"
  echo -e "-c | --clean                        [Clean the trash bin]"
  echo -e "-d | --download-directory           [Specify download directory - Default is /tmp]"
  echo -e "-i | --install-only | install-only  [Will not configure any applications]"
  echo -e "-h | --help                         [See Usage]"
  echo -e "-l | --log                          [Specify directory to store log]"
  echo -e "-p | --provision | provision        [Provision system with all applications or those specified]"
  echo -e "-t | --type | type                  [Specify install type. (server/desktop/pi) ]"
  echo -e "-u | --update | update              [Update system with the latest versions of OS and Apps]"
  echo -e "\nApps: \n${apps[*]} \n"
}

function clean_system(){
  trash-cli_install
  echo "Trash: "
  trash-list
  echo "Emptying recycling bin"
  trash-empty
  apt autoremove -y
}

function provision(){
  for app in "${apps[@]}"
  do
    echo "Installing: ${app}"
    set -x
    if [[ "${app}" == "adb" ]]; then
      adb_install
    elif [[ "${app}" == "audacity" ]]; then
      audacity_install
    elif [[ "${app}" == "android-studio" ]]; then
      android_studio_install
    elif [[ "${app}" == "ansible" ]]; then
      ansible_install
    elif [[ "${app}" == "atomicparsley" ]]; then
      atomicparsley_install
    elif [[ "${app}" == "chrome" ]]; then
      chrome_install
    elif [[ "${app}" == "chrome-remote-desktop" ]]; then
      chrome_remote_desktop_install
    elif [[ "${app}" == "cmatrix" ]]; then
      cmatrix_install
    elif [[ "${app}" == "dialog" ]]; then
      dialog_install
    elif [[ "${app}" == "discord" ]]; then
      discord_install
    elif [[ "${app}" == "docker" ]]; then
      docker_install
    elif [[ "${app}" == "dos2unix" ]]; then
      dos2unix_install
    elif [[ "${app}" == "enscript" ]]; then
      enscript_install
    elif [[ "${app}" == "ffmpeg" ]]; then
      ffmpeg_install
    elif [[ "${app}" == "fstab" ]]; then
      fstab_install
    elif [[ "${app}" == "geniusbot" ]]; then
      geniusbot_install
    elif [[ "${app}" == "gimp" ]]; then
      gimp_install
    elif [[ "${app}" == "git" ]]; then
      git_install
    elif [[ "${app}" == "gnome" ]]; then
      gnome_install
    elif [[ "${app}" == "gnome-theme" ]]; then
      gnome_theme_install
    elif [[ "${app}" == "gnucobol" ]]; then
      gnucobol_install
    elif [[ "${app}" == "ghostscript" ]]; then
      ghostscript_install
    elif [[ "${app}" == "gparted" ]]; then
      gparted_install
    elif [[ "${app}" == "gramps" ]]; then
      gramps_install
    elif [[ "${app}" == "history" ]]; then
      history_install
    elif [[ "${app}" == "jq" ]]; then
      jq_install
    elif [[ "${app}" == "kexi" ]]; then
      kexi_install
    elif [[ "${app}" == "kvm" ]]; then
      kvm_install
    elif [[ "${app}" == "nordvpn" ]]; then
      nordvpn_install
    elif [[ "${app}" == "nfs" ]]; then
      nfs_install
    elif [[ "${app}" == "neofetch" ]]; then
      neofetch_install
    elif [[ "${app}" == "openjdk" ]]; then
      openjdk_install
    elif [[ "${app}" == "openssh" ]]; then
      openssh_install
    elif [[ "${app}" == "mediainfo" ]]; then
      mediainfo_install
    elif [[ "${app}" == "mkvtoolnix" ]]; then
      mkvtoolnix_install
    elif [[ "${app}" == "packer" ]]; then
      packer_install
    elif [[ "${app}" == "phoronix" ]]; then
      phoronix_install
    elif [[ "${app}" == "preload" ]]; then
      preload_install
    elif [[ "${app}" == "poppler-utils" ]]; then
      poppler_utils_install
    elif [[ "${app}" == "powershell" ]]; then
      powershell_install
    elif [[ "${app}" == "python" ]]; then
      python_install
    elif [[ "${app}" == "pycharm" ]]; then
      pycharm_install
    elif [[ "${app}" == "redshift" ]]; then
      redshift_install
    elif [[ "${app}" == "rygel" ]]; then
      rygel_install
    elif [[ "${app}" == "steam" ]]; then
      steam_install
    elif [[ "${app}" == "stat_log" ]]; then
      stat_log_install
    elif [[ "${app}" == "startup-disk-creator" ]]; then
      startup_disk_creator_install
    elif [[ "${app}" == "system-manager" ]]; then
      system_manager_install
    elif [[ "${app}" == "scrcpy" ]]; then
      scrcpy_install
    elif [[ "${app}" == "telegram" ]]; then
      telegram_install
    elif [[ "${app}" == "tesseract" ]]; then
      tesseract_install
    elif [[ "${app}" == "theme-manager" ]]; then
      theme_manager_install
    elif [[ "${app}" == "tigervnc" ]]; then
      tigervnc_install
    elif [[ "${app}" == "tmux" ]]; then
      tmux_install
    elif [[ "${app}" == "transmission" ]]; then
      transmission_install
    elif [[ "${app}" == "trash-cli" ]]; then
      trash_cli_install
    elif [[ "${app}" == "translate-shell" ]]; then
      translate_shell_install
    elif [[ "${app}" == "tree" ]]; then
      tree_install
    elif [[ "${app}" == "unzip" ]]; then
      unzip_install
    elif [[ "${app}" == "udisks2" ]]; then
      udisks2_install
    elif [[ "${app}" == "video-downloader" ]]; then
      video_downloader_install
    elif [[ "${app}" == "video-manager" ]]; then
      video_manager_install
    elif [[ "${app}" == "vlc" ]]; then
      vlc_install
    elif [[ "${app}" == "wine" ]]; then
      wine_install
    elif [[ "${app}" == "wireshark" ]]; then
      wireshark_install
    elif [[ "${app}" == "youtube-dl" ]]; then
      youtube_dl_install
    elif [[ "${app}" == "xdotool" ]]; then
      xdotool_install
    elif [[ "${app}" == "xsel" ]]; then
      xsel_install
    elif [[ "${app}" == "yq" ]]; then
      yq_install
    else
      echo "ERROR: ${app} not found"
    fi
  done
}

function update(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" update
    "${pkg_mgr}" autoremove -y
    "${pkg_mgr}" install update-manager-core -y
    "${pkg_mgr}" upgrade -y
    "${pkg_mgr}" dist-upgrade -y
    "${pkg_mgr}" --purge autoremove -y
    "${pkg_mgr}" clean all -y
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" check-update
    "${pkg_mgr}" install epel-release -y
    "${pkg_mgr}" update -y
    "${pkg_mgr}" upgrade
    "${pkg_mgr}" clean all
  else
    echo "Cannot update. ${os_version} not supported"
  fi
}

function adb_install(){
  if ! command -v adb &> /dev/null; then
    echo -e "ADB could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install android-tools-adb android-tools-fastboot -y
      adb version
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" install epel-release -y
      "${pkg_mgr}" install snapd -y
      systemctl enable --now snapd.socket
      ln -s /var/lib/snapd/snap /snap
      snap install android-adb --edge
      adb version
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "ADB already installed! \nSkipping..."
  fi
}

function android_studio_install(){
  snap install android-studio --classic
}

function ansible_install(){
  python_install
  python3 -m pip install ansible
}

function atomicparsley_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install atomicparsley -y
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install atomicparsley -y
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function audacity_install(){
  if ! command -v audacity &> /dev/null; then
    echo -e "Audacity could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" update
    "${pkg_mgr}" install -y audacity
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install epel-release
    "${pkg_mgr}" install snapd
    systemctl enable --now snapd.socket
    ln -s /var/lib/snapd/snap /snap
    snap install audacity -y
  else
    echo "Distribution ${os_version} not supported"
  fi
  else
    echo -e "Audacity already installed! \nSkipping..."
  fi
}

function chrome_install(){
  if ! command -v google-chrome &> /dev/null; then
    echo -e "Chrome could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      if [[ "${architecture}" == "x86_64" ]]; then
        cd "${download_dir}" || echo "Directory not found or does not exist"
        "${pkg_mgr}" install curl wget -y
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        "${pkg_mgr}" install "${download_dir}/google-chrome-stable_current_amd64.deb" -y
        rm -rf "${download_dir}/google-chrome-stable_current_amd64.deb"
      elif [[ "${architecture}" == "x86" ]]; then
        cd "${download_dir}" || echo "Directory not found or does not exist"
        "${pkg_mgr}" install curl wget -y
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_i386.deb
        "${pkg_mgr}" install "${download_dir}/google-chrome-stable_current_i386.deb"  -y
        rm -rf "${download_dir}/google-chrome-stable_current_i386.deb"
      elif [[ "${architecture}" == "aarch64" ]] || [[ "${architecture}" == "aarch32" ]]; then
        "${pkg_mgr}" install -y chromium-browser
      fi
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      cd "${download_dir}" || echo "Directory not found or does not exist"
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
      "${pkg_mgr}" install "${download_dir}/google-chrome-stable_current_x86_64.rpm"  -y
      rm -rf "${download_dir}/google-chrome-stable_current_amd64.rpm"
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "Chrome already installed! \nSkipping..."
  fi
}

function chrome_remote_desktop_install(){
  if ! command -v google-chrome-remote &> /dev/null; then
    echo -e "Chrome remote desktop could not be found \nInstalling..."
    wget https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb -P /tmp
    "${pkg_mgr}" install -y /tmp/chrome-remote-desktop_current_amd64.deb
    mkdir -p ~/.config/chrome-remote-desktop
    # Chrome remote desktop has an issue with polkit not authenticating USB flash drives
    # https://askubuntu.com/questions/580329/mount-flashdrive-not-authorized-to-perform-operation
#    Stop the Chrome Remote Desktop Service:
#
#    /opt/google/chrome-remote-desktop/chrome-remote-desktop --stop
#    Open all external disks, that logo appears
#
#    Start again the Chrome remote desktop service:
#
#    /opt/google/chrome-remote-desktop/chrome-remote-desktop --start
#    I think you have to do this after each reboot.
  else
    echo -e "Chrome remote desktop already installed! \nSkipping..."
  fi
}

function cmatrix_install(){
  "${pkg_mgr}" install -y cmatrix
}

function dialog_install(){
  "${pkg_mgr}" install -y dialog
}

function discord_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
      snap install discord
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      echo "Distribution ${os_version} not supported"
    else
      echo "Distribution ${os_version} not supported"
    fi
}

function docker_install(){
  if ! command -v docker &> /dev/null; then
    echo -e "Docker could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y containerd docker.io docker-compose
      docker run hello-world
      groupadd docker
      usermod -aG docker ${computer_user}
      # Start Docker
      systemctl start docker
      # Enable Docker at Startup
      systemctl enable docker
      #Hello world
      docker run hello-world
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" install -y yum-utils
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      "${pkg_mgr}" install docker-ce docker-ce-cli containerd.io -y
      groupadd docker
      usermod -aG docker ${computer_user}
      # Start Docker
      systemctl start docker
      # Enable Docker at Startup
      systemctl enable docker
      #Hello world
      docker run hello-world
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "Docker already installed! \nSkipping..."repo
  fi
}

function dos2unix_install(){
  "${pkg_mgr}" install -y dos2unix
}

function enscript_install(){
  "${pkg_mgr}" install -y enscript
}

function tmux_install(){
  "${pkg_mgr}" install -y tmux
}

# Rygel (DLNA)
function rygel_install(){
  if ! command -v rygel &> /dev/null; then
    echo -e "Rygel could not be found \nInstalling..."
    "${pkg_mgr}" install -y rygel
    if [[ ${config_flag} == "true" ]]; then
      echo "uris=/media/${computer_user}/Movies/Movies" | tee -a /etc/rygel.conf
    fi
  else
    echo -e "Rygel already installed! \nSkipping..."
  fi
}

# FFMPEG
function ffmpeg_install(){
  if ! command -v ffpmeg &> /dev/null; then
    echo -e "FFMPEG could not be found \nInstalling..."
    echo "Installing FFMPEG"
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y ffmpeg
      echo "FFMPEG Installed!"
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" -y update
      # Install mlocate (Will be needed to locate pycharm.sh path
      "${pkg_mgr}" -y install autoconf automake bzip2 bzip2-devel cmake freetype-devel gcc gcc-c++ git libtool make mercurial pkgconfig zlib-devel
      # Add Repo
      "${pkg_mgr}" -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
      "${pkg_mgr}" -y install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm https://download1.rpmfusion.org/nonfree/el/rpmfusion-nonfree-release-8.noarch.rpm
      "${pkg_mgr}" -y install http://rpmfind.net/linux/epel/7/x86_64/Packages/s/SDL2-2.0.10-1.el7.x86_64.rpm
      # Install FFmpeg
      "${pkg_mgr}" -y install ffmpeg ffmpeg-devel
      echo "FFMPEG Installed!"
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "FFMPEG already installed! \nSkipping..."
  fi
}

#FSTab Install
function fstab_install(){
  if ! command -v ntfs-3g &> /dev/null; then
    echo -e "FSTAB could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y ntfs-3g
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" install -y ntfs-3g
    else
      echo "Distribution ${os_version} not supported"
    fi
    if [[ ${config_flag} == "true" ]]; then
      lsblk -o NAME,FSTYPE,SIZE,MOUNTPOINT,LABEL

      hdd_storage="/media/${computer_user}/hdd_storage"
      file_storage="/media/${computer_user}/file_storage"
      windows="/media/${computer_user}/windows"
      games="/media/${computer_user}/games"
      photos="/media/${computer_user}/photos"
      media="/media/${computer_user}/media"

      mkdir -p "${hdd_storage}"
      mkdir -p "${file_storage}"
      mkdir -p "${windows}"
      mkdir -p "${games}"
      mkdir -p "${photos}"
      mkdir -p "${media}"

      # If these fstab directories exist, update them. Otherwise create an entry for them.
      if grep -q '^/dev/sdb2' /etc/fstab; then
        sed -i "s#/dev/sdb2.*#/dev/sdb2 ${media} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sdb2 ${media} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      if grep -q '^/dev/sdc2' /etc/fstab; then
        sed -i "s#/dev/sdc2.*#/dev/sdc2 ${file_storage} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sdc2 ${file_storage} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      if grep -q '^/dev/sdd2' /etc/fstab; then
        sed -i "s#/dev/sdd2.*#/dev/sdd2 ${photos} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sdd2 ${photos} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      if grep -q '^/dev/sdf2' /etc/fstab; then
        sed -i "s#/dev/sdf2.*#/dev/sdf2 ${games} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sdf2 ${games} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      if grep -q '^/dev/sdg4' /etc/fstab; then
        sed -i "s#/dev/sdg4.*#/dev/sdg4 ${windows} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sdg4 ${windows} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      if grep -q '^/dev/sde4' /etc/fstab; then
        sed -i "s#/dev/sde4.*#/dev/sde4 ${hdd_storage} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0#" /etc/fstab
      else
        echo -e "/dev/sde4 ${hdd_storage} ntfs-3g rw,auto,user,permissions,uid=1000,gid=1000,umask=0000,noatime,nodiratime,nofail,nodev,nosuid,exec 0 0" | tee -a /etc/fstab
      fi
      mount -a
      systemctl daemon-reload
      # For local drives
      systemctl restart local-fs.target
      # For remote NFS
      systemctl restart remote-fs.target
    fi
  else
    echo -e "FSTAB already installed! \nSkipping..."
  fi
}

function geniusbot_install(){
  python_install
  python3 -m pip install --upgrade geniusbot
}

function gimp_install(){
  "${pkg_mgr}" install -y gimp
}

function git_install(){
  "${pkg_mgr}" install -y git
  if [[ ${config_flag} == "true" ]]; then
    git config --global credential.helper store
  fi
}

function gnome_install(){
  "${pkg_mgr}" install -y gnome-shell ubuntu-gnome-desktop
}

function gnome_theme_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y snapd gnome-tweaks gnome-shell-extensions gnome-shell-extension-ubuntu-dock
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    echo "For Ubuntu Only, not compatible with CentOS"
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function gnucobol_install(){
  "${pkg_mgr}" install -y gnucobol
}

function ghostscript_install(){
  "${pkg_mgr}" install -y ghostscript
}

function gparted_install(){
  "${pkg_mgr}" install -y gparted
}

function gramps_install(){
  if ! command -v gramps &> /dev/null; then
    echo -e "gramps could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y gramps gir1.2-goocanvas-2.0
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      echo "Distribution ${os_version} not supported"
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "gramps already installed! \nSkipping..."
  fi
}

function history_install(){
  if grep -q 'HISTTIMEFORMAT="%Y-%m-%d %T "' ~/.bashrc; then
    echo "HISTTIMEFORMAT already set in .bashrc"
  else
    echo 'HISTTIMEFORMAT="%Y-%m-%d %T "' | tee -a ~/.bashrc
  fi
}

function jq_install(){
  if ! command -v gramps &> /dev/null; then
    echo -e "gramps could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y jq
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      echo "Distribution ${os_version} not supported"
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "gramps already installed! \nSkipping..."
  fi
}

function kexi_install(){
  "${pkg_mgr}" install -y kexi
}

function kvm_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    # Install Dependencies
    "${pkg_mgr}" install curl wget bridge-utils cpu-checker qemu-kvm virtinst libvirt-daemon virt-manager -y
    kvm-ok

    # Enable libvirtd service
    systemctl enable --now libvirtd
    lsmod | grep -i kvm

    # create the network.xml file
    echo '<network>
    <name>vmbr0</name>
    <forward mode="route"/>
    <bridge name="vmbr0" stp="on" delay="0"/>
      <ip address="192.168.0.1" netmask="255.255.0.0">
        <dhcp>
          <range start="192.168.0.2" end="192.168.255.254"/>
        </dhcp>
      </ip>
    </network>' tee -a ./network.xml

    cp ./network.xml /root/
    cat /root/network.xml
    # will define, create, and start our new network.
    virsh net-define /root/network.xml
    virsh net-autostart vmbr0
    virsh net-start vmbr0
    # delete the default private network, this is not required but you can if you prefer to delete it
    #virsh net-destroy default
    #virsh net-undefine default
    # restart the libvirt daemon.
    systemctl restart libvirtd.service
    # Enable IPv4 and IPv6 packet forwarding!
    sed -i "/net.ipv4.ip_forward=1/ s/# *//" /etc/sysctl.conf
    sed -i "/net.ipv6.conf.all.forwarding=1/ s/# *//" /etc/sysctl.conf
    # Reload sysctl for the packet forwarding changes to be applied.
    sysctl -p

    vm=c8-02g ; time virt-install --name "${vm}" \
    --memory 2048 \
    --vcpus=1 \
    --os-variant=centos7.0 \
    --accelerate \
    --graphics none \
    --disk path=/var/lib/libvirt/images/"${vm}".qcow2,size=10 \
    --location /home/mrdr/Downloads/CentOS-8.2.2004-x86_64-dvd1.iso \
    --initrd-inject=/home/mrdr/Documents/automation/bash/Ubuntu/ks.cfg \
    --debug \
    --network bridge=vmbr0 \
    --console pty,target_type=serial \
    --extra-args "console=ttyS0,115200n8 serial auto=true priority=critical ks=file:/ks.cfg SERVERNAME=${vm} net.ifnames=0 biosdevname=0"
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" -y install @virt* dejavu-lgc-* xorg-x11-xauth tigervnc \ libguestfs-tools policycoreutils-python bridge-utils

    # Set Sellinux context
    semanage fcontext -a -t virt_image_t "/vm(/.*)?"; restorecon -R /vm

    # Allow packet forwarding
    sed -i 's/^\(net.ipv4.ip_forward =\).*/\1 1/' /etc/sysctl.conf; sysctl -p

    # Configure libvirtd
    chkconfig libvirtd on; shutdown -r now
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function neofetch_install(){
  "${pkg_mgr}" install -y neofetch
}

function nordvpn_install(){
  echo "Installing NordVPN"
  sh <(curl -sSf https://downloads.nordcdn.com/apps/linux/install.sh)
  echo "NordVPN installation complete"
}

function nfs_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y curl wget nfs-common nfs-kernel-server net-tools
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install -y nfs-utils nfs-utils-lib
  else
    echo "Distribution ${os_version} not supported"
  fi
  if [[ ${config_flag} == "true" ]]; then
    # Create directory
    nfs_directory="/mnt/nfs/"
    mkdir ${nfs_directory} -p
    ls -la ${nfs_directory}
    chown -R nobody:nogroup ${nfs_directory}
    chmod 777 ${nfs_directory}

    # Acquire My IP address for the NFS Server
    my_interface=$(ip route get 8.8.8.8 | awk -F"dev " 'NR==1{split($2,a," ");print a[1]}')
    my_ip=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    my_netmask=$(/sbin/ifconfig "${my_interface}" | awk '/inet /{ print $4;} ')
    my_ip_subnet=$(ip -o -f inet addr show | awk '/scope global/ {print $2 " " $4}' | grep "${my_interface}" | awk '{print $2}')
    printf "${my_interface} \n${my_ip} \n${my_netmask} \n${my_ip_subnet}\n\n\n\n"

    # Add the directory desired to /etc/exports file
    echo "${nfs_directory}  *(rw,sync,no_subtree_check)" | tee -a /etc/exports

    # Export the NFS Share Directory
    exportfs -a

    # Restart NFS Kernel Server
    systemctl restart nfs-kernel-server
    systemctl enable nfs-kernel-server

    # Fix Firewall (IF ACTIVE)
    #ufw status
    #ufw allow from client_ip to any port nfs
    #ufw status
  fi
}

function openjdk_install(){
  "${pkg_mgr}" install -y openjdk-8-jdk
}

function openssh_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y nmap openssh-server

    # Start SSH
    /etc/init.d/ssh start || echo "Already Started"

    # Create Firewall Rule for SSH
    ufw allow ssh
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" -y install openssh-server openssh-clients
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function mkvtoolnix_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y mkvtoolnix
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" -y install mkvtoolnix
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function mediainfo_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y mediainfo
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" -y install mediainfo
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function packer_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    echo "Packer on Ubuntu requires manual installation"
    #curl -fsSL https://apt.releases.hashicorp.com/gpg | apt-key add -
    #apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
    #"${pkg_mgr}" update
    #"${pkg_mgr}" install packer -y
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install -y yum-utils
    yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
    "${pkg_mgr}" -y install packer
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function phoronix_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y phoronix-test-suite
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install -y wget php-cli php-xml bzip2 json php-pear php-devel gcc make php-pecl-json
    # Download Phoronix rpm
    cd /tmp || echo "Could not find /tmp directory"
    wget https://phoronix-test-suite.com/releases/phoronix-test-suite-9.8.0.tar.gz
    # Unzip in Downloads
    tar xvfz phoronix-test*.tar.gz
    cd phoronix-test-suite || echo "Could not find phoronix directory"
    ./install-sh
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function preload_install(){
  if ! command -v preload &> /dev/null; then
    echo -e "preload could not be found \nInstalling..."
    "${pkg_mgr}" install -y preload
  else
    echo -e "preload already installed! \nSkipping..."
  fi
}

function poppler_utils_install(){
  if ! command -v pdftotext &> /dev/null; then
    echo -e "poppler-utils could not be found \nInstalling..."
    "${pkg_mgr}" install -y poppler-utils
  else
    echo -e "poppler-utils already installed! \nSkipping..."
  fi
}

function powershell_install(){
  if ! command -v powershell &> /dev/null; then
    echo -e "powershell could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      echo "PowerShell requires Manual installation on Ubuntu"
      # Install pre-requisite packages.
      #"${pkg_mgr}" install -y wget apt-transport-https software-properties-common
      # Navigate to tmp directory
      #cd /tmp || echo "Could not find /tmp directory"
      # Download the Microsoft repository GPG keys
      #wget -q https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
      # Register the Microsoft repository GPG keys
      #dpkg -i packages-microsoft-prod.deb
      # Update the list of products
      #"${pkg_mgr}" update
      # Enable the "universe" repositories
      #add-apt-repository -y universe
      # Install PowerShell
      #"${pkg_mgr}" install -y powershell
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" install -y wget curl
      # Register the Microsoft RedHat repository
      curl https://packages.microsoft.com/config/rhel/7/prod.repo | tee /etc/yum.repos.d/microsoft.repo
      # Install PowerShell
      yum install -y powershell
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "powershell already installed! \nSkipping..."
  fi
}

function python_install(){
  if ! command -v python3 &> /dev/null; then
    echo -e "python3 could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y mlocate
      updatedb
      # Install Python 3.X and 3.8
      "${pkg_mgr}" install -y python-is-python3 qtbase5-examples qt5-doc-html qtbase5-doc-html qt5-doc qtcreator build-essential libglu1-mesa-dev mesa-common-dev qt5-default python3 python3-pip build-essential python3-pil python3-pil.imagetk zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev python-tk python3-tk tk-dev gcc git tcl-thread snapd
      # Update PIP
      python3 -m pip install --upgrade pip
      # Install Python Packages
      python3 -m pip install autoconf setuptools wheel git+https://github.com/nficano/pytube regex requests tqdm selenium mutagen tkthread pillow twitter_scraper matplotlib numpy pandas scikit-learn scipy seaborn statsmodels more-itertools pyglet shapely piexif webdriver-manager pandas_profiling ipython-genutils traitlets jupyter-core pyrsistent jsonschema nbformat tornado pickleshare wcwidth prompt-toolkit parso jedi backcall pygments ipython pyzmq jupyter-client ipykernel Send2Trash prometheus-client pywinpty terminado testpath mistune packaging bleach entrypoints pandocfilters nbconvert notebook widgetsnbextension ipywidgets numba phik xlsxwriter paramiko cx_oracle pypyodbc sqlalchemy pyhive ffmpeg-python m3u8 aiohttp
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      # Install mlocate (Will be needed to locate pycharm.sh path
      "${pkg_mgr}" -y install mlocate
      updatedb
      # Install Python 3.X and 3.8
      "${pkg_mgr}" install python3 -y
      "${pkg_mgr}" install python38 -y
      # Update PIP
      python3 -m pip install --upgrade pip
      python3.8 -m pip install --upgrade pip
      # Install Python Depedencies
      "${pkg_mgr}" install qt5-default gcc git python3-devel python3-pil.imagetk python38-devel openssl-devel tcl-thread xz-libs bzip2-devel libffi-devel python3-tkinter python38-tkinter -y
      # Set Git Credential Store Globally
      git config --global credential.helper store
      # Install Python Packages
      python3 -m pip install autoconf setuptools wheel pytube3 regex requests tqdm selenium mutagen tkthread Pillow twitter_scraper matplotlib numpy pandas scikit-learn scipy seaborn statsmodels more-itertools pyglet shapely piexif webdriver-manager pandas_profiling ipython-genutils traitlets jupyter-core pyrsistent jsonschema nbformat tornado pickleshare wcwidth prompt-toolkit parso jedi backcall pygments ipython pyzmq jupyter-client ipykernel Send2Trash prometheus-client pywinpty terminado testpath mistune packaging bleach entrypoints pandocfilters nbconvert notebook widgetsnbextension ipywidgets numba phik xlsxwriter paramiko cx_oracle pypyodbc sqlalchemy pyhive cx_freeze ffmpeg-python m3u8 aiohttp
      python3.8 -m pip install autoconf setuptools wheel pytube3 regex requests tqdm selenium mutagen tkthread Pillow twitter_scraper matplotlib numpy pandas scikit-learn scipy seaborn statsmodels more-itertools pyglet shapely piexif webdriver-manager pandas_profiling ipython-genutils traitlets jupyter-core pyrsistent jsonschema nbformat tornado pickleshare wcwidth prompt-toolkit parso jedi backcall pygments ipython pyzmq jupyter-client ipykernel Send2Trash prometheus-client pywinpty terminado testpath mistune packaging bleach entrypoints pandocfilters nbconvert notebook widgetsnbextension ipywidgets numba phik xlsxwriter paramiko cx_oracle pypyodbc sqlalchemy pyhive cx_freeze ffmpeg-python m3u8 aiohttp
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "python3 already installed! \nSkipping..."
  fi
}

function pycharm_install(){
  if ! command -v pycharm-community &> /dev/null; then
    echo -e "pycharm-community could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      "${pkg_mgr}" install -y mlocate
      updatedb
      # Install Python 3.X and 3.8
      "${pkg_mgr}" install snapd -y
      # Systemmd unit that managed the main snap communication sockets needs to be enabled.
      systemctl enable --now snapd.socket
      # Sleep for 5 seconds to allow for system link creation.
      date +"%H:%M:%S"
      sleep 5
      date +"%H:%M:%S"
      # To enable classic snap support, this creates a symbolic link between /var/lib/snapd/snap and /snap
      ln -s /var/lib/snapd/snap /snap
      # Install PyCharm CE
      snap install pycharm-community --classic
      # Locate PyCharm Installation Path
      updatedb
      pycharm_path=$(locate pycharm.sh)
      # Launch PyCharm as Root
      echo $pycharm_path
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      # Install snapd package manager (Contains all depedencies packaged together)
      "${pkg_mgr}" install snapd -y
      # Systemmd unit that managed the main snap communication sockets needs to be enabled.
      systemctl enable --now snapd.socket
      # Sleep for 5 seconds to allow for system link creation.
      date +"%H:%M:%S"
      sleep 5
      date +"%H:%M:%S"
      # To enable classic snap support, this creates a symbolic link between /var/lib/snapd/snap and /snap
      ln -s /var/lib/snapd/snap /snap
      # Install PyCharm CE
      snap install pycharm-community --classic
      # Locate PyCharm Installation Path
      updatedb
      pycharm_path=$(locate pycharm.sh)
      # Launch PyCharm as Root
      echo $pycharm_path
    else
      echo "Distribution ${os_version} not supported"
    fi
    if [[ ${config_flag} == "true" ]]; then
      git config --global credential.helper store
    fi
  else
    echo -e "pycharm-community already installed! \nSkipping..."
  fi
}

function redshift_install(){
  "${pkg_mgr}" install -y redshift redshift-gtk
}

function software-updater_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y update-manager synaptic
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    echo "For Ubuntu Only, not compatible with CentOS"
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function stat_log_install(){
  "${pkg_mgr}" install -y sysstat net-tools numactl linux-tools-common
}

function startup_disk_creator_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y usb-creator-gtk
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    echo "For Ubuntu Only, not compatible with CentOS"
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function steam_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y steam
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install http://dl.fedoraproject.org/pub/epel/beta/7/x86_64/epel-release-7-0.2.noarch.rpm -y
    "${pkg_mgr}" install http://download1.rpmfusion.org/free/fedora/releases/19/Everything/i386/os/libtxc_dxtn-1.0.0-3.fc19.i686.rpm -y
    "${pkg_mgr}" --enablerepo=steam_fedora19 install steam -y
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function scrcpy_install(){
  "${pkg_mgr}" install -y scrcpy
}

function system_manager_install(){
  yes | cp -rf "${script_directory}/system-manager" /usr/local/bin
  chmod +x /usr/local/bin/system-manager
  system-manager -h
}

function telegram_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
      snap install telegram-desktop
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      echo "Distribution ${os_version} not supported"
    else
      echo "Distribution ${os_version} not supported"
    fi
}

function tesseract_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y tesseract-ocr libtesseract-dev tesseract-ocr-eng
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" install epel-release -y
    "${pkg_mgr}" install tesseract-devel leptonica-devel -y
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function theme_manager_install(){
  yes | cp -rf "${script_directory}/theme-manager" /usr/local/bin
  chmod +x /usr/local/bin/theme-manager
  theme-manager -h
}

function tigervnc_install(){
  "${pkg_mgr}" install -y tigervnc-standalone-server
}

function transmission_install(){
  "${pkg_mgr}" install -y transmission-qt transmission-cli transmission-daemon
}

function trash_cli_install(){
  "${pkg_mgr}" install -y trash-cli
}

function translate_shell_install(){
  "${pkg_mgr}" install -y translate-shell
}

function tree_install(){
  "${pkg_mgr}" install -y tree
}

function udisks2_install(){
  "${pkg_mgr}" install -y udisks2
}

function unzip_install(){
  "${pkg_mgr}" install -y unzip
}

function youtube_dl_install(){
  python3 -m pip install --upgrade youtube-dl
}

function video_downloader_install(){
  yes | cp -rf "${script_directory}/video-downloader" /usr/local/bin
  chmod +x /usr/local/bin/video-downloader
  video-downloader -h
}

function video_manager_install(){
  yes | cp -rf "${script_directory}/video-manager" /usr/local/bin
  chmod +x /usr/local/bin/video-manager
  video-manager -h
}

function vlc_install(){
  if [[ "${os_version}" == "Ubuntu" ]] ; then
    "${pkg_mgr}" install -y vlc
  elif [[ "${os_version}" == "CentOS Linux" ]] ; then
    "${pkg_mgr}" -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    "${pkg_mgr}" -y install https://download1.rpmfusion.org/free/el/rpmfusion-free-release-8.noarch.rpm
    "${pkg_mgr}" -y install vlc
  else
    echo "Distribution ${os_version} not supported"
  fi
}

function wine_install(){
  "${pkg_mgr}" install -y wine
}

function wireshark_install(){
  if ! command -v wireshark &> /dev/null; then
    echo -e "wireshark could not be found \nInstalling..."
    if [[ "${os_version}" == "Ubuntu" ]] ; then
      echo "wireshark-common wireshark-common/install-setuid boolean true" | debconf-set-selections
      DEBIAN_FRONTEND=noninteractive "${pkg_mgr}" install wireshark -y
    elif [[ "${os_version}" == "CentOS Linux" ]] ; then
      "${pkg_mgr}" install -y wireshark wireshark-qt
    else
      echo "Distribution ${os_version} not supported"
    fi
  else
    echo -e "wireshark already installed! \nSkipping..."
  fi

}

function xdotool_install(){
  "${pkg_mgr}" install -y xdotool
}

function xsel_install(){
  "${pkg_mgr}" install -y xsel
}

function yq_install(){
  snap install yq
}

computer_user=$(getent passwd {1000..6000} | awk -F: '{ print $1}')
os_version=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
os_version="${os_version:1:-1}"
architecture="$(uname -m)"
date=$(date +"%m-%d-%Y_%I-%M")
script_directory="$(dirname ${0})"
apps=( "adb" "android-studio" "ansible" "atomicparsley" "audacity" "chrome" "dialog" "discord" "docker" "dos2unix" \
"enscript" "ffmpeg" "fstab" "geniusbot" "gimp" "git" "gnome" "gnome-theme" "gnucobol" "ghostscript" "gparted" "gramps" "history" "jq" "kexi" "kvm" \
"mediainfo" "mkvtoolnix" "neofetch" "nfs" "nordvpn" "openjdk" "openssh" "openvpn" "packer" "phoronix" "preload" "poppler-utils" "powershell" \
"python" "pycharm" "redshift" "rygel" "scrcpy" "statlog" "steam" "startup-disk-creator" "system-manager" "telegram" "tesseract" "theme-manager" "tigervnc" \
"tmux" "transmission" "translate-shell" "trash-cli" "tree" "unzip" "udisks2" "vlc" "video-manager" "wine" "wireshark" "youtube-dl" "xdotool" "xsel" "yq" )
server_apps=( "adb" "ansible" "atomicparsley" "dialog" "docker" "dos2unix" \
"enscript" "ffmpeg" "fstab" "geniusbot" "git" "gnucobol" "ghostscript" "gparted" "history" "jq" "kexi" "kvm" \
"mediainfo" "mkvtoolnix" "neofetch" "nfs" "nordvpn" "openjdk" "openssh" "openvpn" "packer" "phoronix" "preload" "poppler-utils" "powershell" \
"python" "rygel" "scrcpy" "statlog" "startup-disk-creator" "system-manager" "tesseract" "theme-manager" \
"tmux" "transmission" "translate-shell" "trash-cli" "tree" "unzip" "udisks2" "vlc" "video-manager" "youtube-dl" "xdotool" "xsel" "yq" )
pi_apps=( "atomicparsley" "audacity" "chrome" "docker" "dos2unix" "ffmpeg" "gimp" "git" \
"gnome" "gnome-theme" "gnucobol" "ghostscript" "gparted" "history" "kvm" "mediainfo" "mkvtoolnix" "nfs" "nordvpn" "openjdk" "geniusbot" \
"openssh" "preload" "powershell" "python" "pycharm" "redshift" "statlog" "scrcpy" "system-manager" "tesseract" "theme-manager" "tmux" "transmission" \
"translate-shell" "trash-cli" "tree" "unzip" "udisks2" "vlc" "video-downloader" "video-manager" "wine" "wireshark" "youtube-dl" "yq" )
config_flag='true'
clean_flag='false'
provision_flag='false'
update_flag='false'
log_flag='false'
log_dir='.'
log_file="provision_log_${date}.log"
download_dir="/tmp"

# Check if arguments were provided
if [ -z "$1" ]; then
  usage
  exit 0
fi

# Check if OS is supported
if [[ "${os_version}" == "Ubuntu" ]] ; then
  pkg_mgr='apt'
elif [[ "${os_version}" == "CentOS Linux" ]] ; then
  pkg_mgr='dnf'
else
  pkg_mgr='na'
  echo "Distribution ${os_version} not supported"
  exit 0
fi

while test -n "$1"; do
  case "$1" in
    h | -h | --help)
      echo -e "\n\nOperating System: ${os_version}"
      echo "Architecture: ${architecture}"
      echo "User: ${computer_user}"
      usage
      exit 0
      ;;
    a | -a | --applications)
      if [ ${2} ]; then
        IFS=',' read -r -a apps <<< "$2"
        echo "Apps to install: ${apps[*]}"
        shift
      else
        echo 'ERROR: "-a | --applications" requires a non-empty option argument.'
        exit 0
      fi
      shift
      ;;
    c | -c | --clean)
      clean_flag='true'
      shift
      ;;
    d | -d | --download-directory)
      if [ ${2} ]; then
        download_dir="${2}"
        shift
      else
        echo 'ERROR: "-d | --download-directory" requires a non-empty option argument.'
        exit 0
      fi
      shift
      ;;
    i | -i | --install-only | install-only)
      echo "Installing only, not configuring any applications"
      config_flag='false'
      provision_flag='true'
      shift
      ;;
    l | -l | --log)
      if [[ ${2:0:1} == "/" ]] || [[ ${2:0:1} == "." ]] || [[ ${2:0:1} == "~" ]]; then
        log_dir="${2}"
        shift
      elif [[ ${2:0:1} == "-" ]]; then
        echo "No log directory specified or it must start with / . or ~, using ${script_directory} instead"
      else
        echo "No log directory specified or it must start with / . or ~, using ${script_directory} instead"
      fi
      log_flag='true'
      shift
      ;;
    p | -p | --provision | provision)
      echo "Provisioning System"
      provision_flag='true'
      shift
      ;;
    u | -u | --update | update)
      echo "Updating System"
      update_flag='true'
      shift
      ;;
    t | -t | --type | type)
      server_apps
      if [ ${2} == "server" ]; then
        apps=("${server_apps[@]}")
        shift
      elif [ ${2} == "desktop" ]; then
        apps=("${apps[@]}")
        shift
      elif [ ${2} == "pi" ]; then
        # Check if device is a Raspberry Pi, or other ARM devices
        if [[ "${architecture}" == "aarch64" ]] || [[ "${architecture}" == "aarch32" ]]; then
          echo "Selecting apps for Raspberry Pi or other ARM Devices"
          apps=("${pi_apps[@]}")
        fi
        shift
      else
        echo 'ERROR: "-d | --download-directory" requires a non-empty option argument.'
        exit 0
      fi
      shift
      ;;
    --)# End of all options.
      shift
      break
      ;;
    -?*)
      printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
      ;;
    *)
      shift
      break
      ;;
  esac
done

if [ ${log_flag} == "true" ]; then
  [ ! -d "${log_dir}" ] && echo "Creating log directory" && mkdir -p "${log_dir}"
fi

if [ ${update_flag} == "true" ]; then
  if [ ${log_flag} == "true" ]; then
    update | tee -a "${log_dir}/${log_file}"
  else
    update
  fi
fi

if [ ${provision_flag} == "true" ]; then
  if [ ${log_flag} == "true" ]; then
    provision | tee -a "${log_dir}/${log_file}"
  else
    provision
  fi
else
  exit 0
fi

if [ ${clean_flag} == "true" ]; then
  if [ ${log_flag} == "true" ]; then
    clean_system | tee -a "${log_dir}/${log_file}"
  else
    clean_system
  fi
else
  exit 0
fi
